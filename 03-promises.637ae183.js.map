{"mappings":"gfA+BA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAe,SACpCC,EAAWF,SAASC,cAAc,gBAClCE,EAAUH,SAASC,cAAc,eACjCG,EAAYJ,SAASC,cAAc,iBAwBvC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBC,YAAW,WACKC,KAAKC,SAAW,GAEhCJ,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,gBA7B1BR,EAAQe,iBAAkB,UAE1B,SAAsBC,GACpBA,EAAMC,iBAENd,EAAWe,OAAOF,EAAMG,cAAcX,MAAMY,OAC5ChB,EAAUc,OAAOF,EAAMG,cAAcE,KAAKD,OAC1Cf,EAAYa,OAAOF,EAAMG,cAAcG,OAAOF,OAEhD,IAAK,IAAIG,EAAG,EAAGA,GAAKlB,EAAWkB,IAC1BjB,EAAciB,EAAGpB,GAClBqB,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACfV,EAAA4B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,UAGhEqB,OAAM,SAAAJ,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAChBV,EAAA4B,OAAOI,QAAQ,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,UAE9DL,GAAYC,K","sources":["src/js/03-promises.js"],"sourcesContent":["\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, \n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), \n// що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     Fulfill\n//   } else {\n//     Reject\n//   }\n// }\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, \n// в якому будуть властивості position і delay зі значеннями однойменних параметрів. \n// Використовуй початковий код функції для вибору того, \n// що потрібно зробити з промісом - виконати або відхилити.\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector(`.form`);\nlet delayRef = document.querySelector('[name=delay]');\nlet stapRef = document.querySelector('[name=step]');\nlet amountRef = document.querySelector('[name=amount]');\n\nformRef.addEventListener(`submit`, onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  delayRef = Number(event.currentTarget.delay.value);\n  stapRef = Number(event.currentTarget.step.value);\n  amountRef = Number(event.currentTarget.amount.value);\n \nfor (let i =1; i <= amountRef; i++) {   \n     createPromise(i, delayRef)   \n   .then(({ position, delay }) => {    \n       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n     })\n\n   .catch(({ position, delay }) => {   \n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n     })\n   delayRef += stapRef;\n}\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) =>\n   {    setTimeout(() => {\n  const shouldResolve = Math.random() > 0.3; \n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    });\n  })\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$delayRef","$ce04d3a99e08e73b$var$stapRef","$ce04d3a99e08e73b$var$amountRef","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","Number","currentTarget","value","step","amount","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.637ae183.js.map"}