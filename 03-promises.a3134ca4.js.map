{"mappings":"oeA8EA,IAAAA,EAAAC,EAAA,SAyBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAIP,SAASQ,GAAiBT,SAAEA,EAAQC,MAAEA,IACpCJ,EAAAa,OAAOC,QAAQ,uBAAqBX,QAAiBC,OAGvD,SAASW,GAAeZ,SAAEA,EAAQC,MAAEA,IAClCJ,EAAAa,OAAOG,QAAQ,sBAAoBb,QAAeC,QA1CvC,CACXa,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAEN,MACEC,UAAUnB,MAAEA,EAAKoB,KAAEA,EAAIC,OAAEA,IACvBJ,EAAMK,OAEV,IAAIC,EAAeC,OAAOxB,EAAMyB,OAEhC,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAOI,MAAOC,GAAK,EACtC5B,EAAc4B,EAAGH,GAAcI,KAAKnB,GAAkBoB,MAAMjB,GAC5DY,GAAgBC,OAAOJ,EAAKK,OAG9BR,EAAMK,OAAOO","sources":["src/js/03-promises.js"],"sourcesContent":["\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, \n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), \n// що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     Fulfill\n//   } else {\n//     Reject\n//   }\n// }\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, \n// в якому будуть властивості position і delay зі значеннями однойменних параметрів. \n// Використовуй початковий код функції для вибору того, \n// що потрібно зробити з промісом - виконати або відхилити.\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n\n\n\n\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const formRef = document.querySelector(`.form`);\n// let delayRef = document.querySelector('[name=delay]');\n// let stapRef = document.querySelector('[name=step]');\n// let amountRef = document.querySelector('[name=amount]');\n\n// formRef.addEventListener(`submit`, onFormSubmit);\n\n// function onFormSubmit(event) {\n//   event.preventDefault();\n\n//   delayRef = Number(event.currentTarget.delay.value);\n//   stapRef = Number(event.currentTarget.step.value);\n//   amountRef = Number(event.currentTarget.amount.value);\n \n// for (let i =1; i <= amountRef; i++) {   \n//      createPromise(i, delayRef)   \n//    .then(({ position, delay }) => {    \n//        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//      })\n\n//    .catch(({ position, delay }) => {   \n//        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//      })\n//    delayRef += stapRef;\n// }\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) =>\n//    {    setTimeout(() => {\n//   const shouldResolve = Math.random() > 0.3; \n//       if (shouldResolve) {\n//         resolve({position, delay});\n//       } else {\n//         reject({position, delay});\n//       }\n//     });\n//   })\n// }\n\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\ndebugger;\n  const {\n    elements: { delay, step, amount },\n  } = event.target;\n\n  let promiseDelay = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, promiseDelay).then(onPromiseSuccess).catch(onPromiseError);\n    promiseDelay += Number(step.value);\n  }\n\n  event.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onPromiseSuccess({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); \n}\n\nfunction onPromiseError({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`); \n}\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$onPromiseSuccess","Notify","success","$47d4ff9957288465$var$onPromiseError","failure","form","document","querySelector","addEventListener","event","preventDefault","elements","step","amount","target","promiseDelay","Number","value","i","then","catch","reset"],"version":3,"file":"03-promises.a3134ca4.js.map"}